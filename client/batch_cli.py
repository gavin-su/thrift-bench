#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys,time
sys.path.append("../python/gen-py/bench")
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import BenchService
from ttypes import *

from threading import Thread

HOST = "192.168.56.128"
PORT = 54343
CONCURRENCY = int(sys.argv[1])
REPEAT = int(sys.argv[2])

class BenchWorker(Thread):
  def run(self):
    from datetime import datetime
    succ, fail = REPEAT,0

    start = datetime.now()
    try:
      for i in range(0,REPEAT):
        c,t = self.create()
        c.test(1)
        self.close(t)
      end = datetime.now()
    except:
      print 'err', sys.exc_info()
      fail = fail + 1
      succ = succ - 1
      end  = start

    usedtime = end - start
    usedmsec = usedtime.seconds * 1000000 + usedtime.microseconds
    if usedmsec > 0:
        print 'used %d milliseconds_per_req' %(usedmsec/succ)

  def __init__(self):
    Thread.__init__(self)

  def create(self):
    socket = TSocket.TSocket(HOST, PORT)
    socket.setTimeout(10)
    transport = TTransport.TFramedTransport(socket)
    protocol = TBinaryProtocol.TBinaryProtocol(transport)
    client = BenchService.Client(protocol)
    transport.open()
    return (client,transport)

  def close(self,transport):
    transport.close()


threads = [ BenchWorker() for i in range(0,CONCURRENCY)]
t = time.time()
for i in threads:
  i.start()

for i in threads:
  i.join()
