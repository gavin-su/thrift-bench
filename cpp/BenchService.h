/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BenchService_H
#define BenchService_H

#include <thrift/TDispatchProcessor.h>
#include "bench_types.h"



class BenchServiceIf {
 public:
  virtual ~BenchServiceIf() {}
  virtual int32_t test(const int32_t v) = 0;
};

class BenchServiceIfFactory {
 public:
  typedef BenchServiceIf Handler;

  virtual ~BenchServiceIfFactory() {}

  virtual BenchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BenchServiceIf* /* handler */) = 0;
};

class BenchServiceIfSingletonFactory : virtual public BenchServiceIfFactory {
 public:
  BenchServiceIfSingletonFactory(const boost::shared_ptr<BenchServiceIf>& iface) : iface_(iface) {}
  virtual ~BenchServiceIfSingletonFactory() {}

  virtual BenchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BenchServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BenchServiceIf> iface_;
};

class BenchServiceNull : virtual public BenchServiceIf {
 public:
  virtual ~BenchServiceNull() {}
  int32_t test(const int32_t /* v */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _BenchService_test_args__isset {
  _BenchService_test_args__isset() : v(false) {}
  bool v;
} _BenchService_test_args__isset;

class BenchService_test_args {
 public:

  BenchService_test_args() : v(0) {
  }

  virtual ~BenchService_test_args() throw() {}

  int32_t v;

  _BenchService_test_args__isset __isset;

  void __set_v(const int32_t val) {
    v = val;
  }

  bool operator == (const BenchService_test_args & rhs) const
  {
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const BenchService_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BenchService_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BenchService_test_pargs {
 public:


  virtual ~BenchService_test_pargs() throw() {}

  const int32_t* v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BenchService_test_result__isset {
  _BenchService_test_result__isset() : success(false) {}
  bool success;
} _BenchService_test_result__isset;

class BenchService_test_result {
 public:

  BenchService_test_result() : success(0) {
  }

  virtual ~BenchService_test_result() throw() {}

  int32_t success;

  _BenchService_test_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const BenchService_test_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BenchService_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BenchService_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BenchService_test_presult__isset {
  _BenchService_test_presult__isset() : success(false) {}
  bool success;
} _BenchService_test_presult__isset;

class BenchService_test_presult {
 public:


  virtual ~BenchService_test_presult() throw() {}

  int32_t* success;

  _BenchService_test_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BenchServiceClient : virtual public BenchServiceIf {
 public:
  BenchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BenchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t test(const int32_t v);
  void send_test(const int32_t v);
  int32_t recv_test();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BenchServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BenchServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BenchServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BenchServiceProcessor(boost::shared_ptr<BenchServiceIf> iface) :
    iface_(iface) {
    processMap_["test"] = &BenchServiceProcessor::process_test;
  }

  virtual ~BenchServiceProcessor() {}
};

class BenchServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BenchServiceProcessorFactory(const ::boost::shared_ptr< BenchServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BenchServiceIfFactory > handlerFactory_;
};

class BenchServiceMultiface : virtual public BenchServiceIf {
 public:
  BenchServiceMultiface(std::vector<boost::shared_ptr<BenchServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BenchServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BenchServiceIf> > ifaces_;
  BenchServiceMultiface() {}
  void add(boost::shared_ptr<BenchServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t test(const int32_t v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test(v);
    }
    return ifaces_[i]->test(v);
  }

};



#endif
